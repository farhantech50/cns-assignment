CREATE TABLE projects (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    intro TEXT,
    owner_id VARCHAR(255) NOT NULL,
    status ENUM('pre', 'start', 'end') NOT NULL,
    startDateTime DATE DEFAULT NULL,
    endDateTime DATE DEFAULT NULL,
    FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE,
);

CREATE TABLE project_members (
    id INT AUTO_INCREMENT PRIMARY KEY,
    project_id INT NOT NULL,
    user VARCHAR(255) NOT NULL,
    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,
);

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    contact VARCHAR(50) NOT NULL,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL
);


SELECT table_name
FROM information_schema.tables
WHERE table_type='BASE TABLE'
AND table_schema = 'project'




-- Disable foreign key checks temporarily
SET foreign_key_checks = 0;

-- Truncate the table
TRUNCATE TABLE project_members;
TRUNCATE TABLE projects;

-- Re-enable foreign key checks
SET foreign_key_checks = 1;




ALTER TABLE projects ADD COLUMN created_by INT NOT NULL;
ALTER TABLE projects 
ADD FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE;






import { createContext, useContext, useState } from "react";

export const TokenContext = createContext();

export const useTokenContext = () => {
  return useContext(TokenContext);
};

export const TokenContextProvider = ({ children }) => {
  const [accessToken, setAccessToken] = useState(
    localStorage.getItem("access-token")
  );
  const [refreshToken, setRefreshToken] = useState(null);
  return (
    <TokenContext.Provider
      value={{ accessToken, setAccessToken, refreshToken, setRefreshToken }}
    >
      {children}
    </TokenContext.Provider>
  );
};
